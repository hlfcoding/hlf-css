//
// Chrome Helpers
// ==============
// Vendor prefixing not included. You're encouraged to use an auto-prefixing solution.

@import 'grayscale-colors';
@import 'css-helpers';

// Box Shadows
// -----------

// A preset using box-shadow that by default has no offset, where two box shadows are applied
// uniformly, one for an inner shadow, another for an outer "edge", to create the
// appearance of a bevel. You can provide inverted colors for the "contour" look,
// where it's bumpy, not caved in.
@mixin simple-bevel($shade, $light,
                    $shade-blur: 1px, $light-blur: 0,
                    $shade-size: 0, $light-size: 1px,
                    $shade-x: 0, $shade-y: 0)
{
  box-shadow: inset $shade-x $shade-y $shade-blur $shade-size $shade,
              0 0 $light-blur $light-size $light;
}

// Beware that this is expensive, since it creates 4 box-shadows. By default it
// creates a slight inset (value-set 1), a small dropshadow with no offset
// (value-set 2), a large dropshadow that's a bit below (value-set-3), and a
// sharp small shaded "edge" that gives it a 3d feel (value-set-4). This is very
// custom, but can be useful if you want to quickly have a set of four box-shadows
// to somewhat customize.
@mixin compound-contour($size-1: 15px, $size-2: 2px, $size-3: 10px,
                        $shift-1: 3px, $shift-2: 3px,
                        $shade-1: $b-3, $shade-2: $b-5, $shade-3: $b-8, $shade-4: $b-2)
{
  box-shadow: inset 0 0 $size-1 0 $shade-1,
              0 0 $size-2 $shade-2,
              0 $shift-1 $size-3 $shade-3,
              0 $shift-2 0 $shade-4;
}

// Gradients
// ---------

// Draws a generic, vertical (top-to-bottom by default) gradient.
// @deprecated
@mixin simple-gradient($light, $shade) {
  @if $light != $clear and $shade != $clear {
    background-color: mix($light, $shade);
  }
  @include linear-gradient(to bottom, $light, $shade);
}

// Draws a more custom gradient that supports up to three colors. This is useful
// if you want a surface that appears to have more "contour."
// @deprecated
@mixin single-stop-gradient($start, $stop, $end,
                            $direction: to bottom)
{
  background-color: mix($start, $stop);
  @include linear-gradient($direction, $start, $stop, $end);
}

// Text Effects
// ------------

// Draws an inset around the text.
// TODO: Document.
@mixin text-inset($outset-color: $W-5, $inset-color: $b-5, $text-color: #ddd,
                  $offset: 3px, $direction: vertical, $offset-direction: 1)
{
  @if $direction == vertical {
    text-shadow: 0 ($offset-direction * 1px) 0 $outset-color;
  } @else if $direction == horizontal {
    text-shadow: ($offset-direction * 1px) 0 0 $outset-color;
  }
  @if $inset-color != $clear {
    > span[data-title] {
      color: $inset-color;
      position: relative;
      top: 2px - $offset;
      &::before {
        color: $text-color;
        content: attr(data-title);
        position: absolute; top: 0; left: 0;
        text-shadow: none;
        width: 100%; height: 100%;
        @if $direction == vertical { top: $offset; }
        @else if $direction == horizontal { left: $offset; }
      }
    }
  }
}

// Mostly derived from HTML5 Boilerplate. Useful mainly for disabling /
// neutralizing visibly selected text.
@mixin text-selection($color: $b-2, $text-color: #fff) {
  ::selection {
    background: $color;
    color: $text-color;
    text-shadow: none;
  }
  @if $color == transparent {
    cursor: default;
  }
}

// Animations
// ----------

// A preset fading on-hover animation.
@mixin anim-fadein-onhover($target: '&', $opacity: 0.6) {
  @include anim-onhover(opacity, $opacity, 1, $target);
}

// Layouts
// -------

// Simple "nav bar" type layout where the children simply float left.
@mixin navbar-layout($spacing: 1em, $child-selector: 'button', $padding: false) {
  @extend %clearfix;
  display: block;
  > #{$child-selector} {
    display: block;
    float: left;
    @if $padding != false {
      padding: { left: $spacing / 2; right: $spacing / 2; }
    } @else {
      margin-right: $spacing;
      &:last-child {
        margin-right: 0;
      }
    }
  }
}

// Full Styles
// -----------

// Common ruled-list style. This can apply to any group of elements where you want
// lines in between (but not on either edge of the group). The colors and optional
// light source are meant to give the borders a beveled feel. The light source also
// controls the orientation. The edge padding allows padding to each of the edges,
// and the selector can be used to specify what selector (in the context of the
// first and last child), gets the padding. You can pass false for either to omit
// the respective styles.
// TODO: box-shadow implementation support.
// TODO: horizontal support.
@mixin ruled-list($light, $shade, $edge-padding: 0,
                  $edge-padding-selector: '&',
                  $first-item-selector: '&: first-child',
                  $last-item-selector: '&:last-child',
                  $item-selector: '&',
                  $light-source: top)
{
  $start: top;
  $end: bottom;
  @if $light-source == left {
    $start: left;
    $end: right;
  }
  #{$item-selector} {
    border: {
      #{$start}: 1px solid $light;
      #{$end}: 1px solid $shade;
    }
  }
  @if $first-item-selector {
    #{$first-item-selector} {
      border-#{$start}: 0;
      @if $edge-padding > 0 {
        #{$edge-padding-selector} { padding-#{$start}: $edge-padding; }
      }
    }
  }
  @if $last-item-selector {
    #{$last-item-selector} {
      border-#{$end}: 0;
      @if $edge-padding > 0 {
        #{$edge-padding-selector} { padding-#{$end}: $edge-padding; }
      }
    }
  }
}
